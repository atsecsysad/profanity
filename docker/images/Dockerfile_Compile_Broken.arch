FROM archlinux

RUN pacman -Syu --noconfirm && pacman -S --needed --noconfirm \
  autoconf \
  autoconf-archive \
  automake \
  base-devel \
  check \
  cmake \
  cmocka \
  curl \
  debuginfod \
  doxygen \
  expat \
  gcc \
  git \
  gpgme \
  gtk2 \
  libgcrypt \
  libmicrohttpd \
  libnotify \
  libsignal-protocol-c \
  libotr \
  libtool \
  libxss \
  make \
  openssl \
  pkg-config \
  python \
  wget \
  sqlite \
  valgrind \
  gdk-pixbuf2 \
  qrencode

# Cluster RUN commands to minimize layer creation.
RUN mkdir -p /usr/src/{stabber,profanity} && \
  useradd -mb /usr/src --shell=/bin/false aur && usermod -L aur

USER aur
WORKDIR /usr/src/aur

# NOTE: These will change their extension to .tar.zst if a new snapshot is built
# due to:
# https://www.archlinux.org/news/now-using-zstandard-instead-of-xz-for-package-compression/

# Build libstrophe
RUN wget https://aur.archlinux.org/cgit/aur.git/snapshot/libstrophe-git.tar.gz && \
  tar -zxvf libstrophe-git.tar.gz && \
  pushd libstrophe-git && makepkg && popd

# Install libstrophe. Can not be done in conjunction with profanity build, as it's a dep
# for profanity.
USER root
RUN pacman -U --noconfirm libstrophe-git/libstrophe-git-*.pkg.tar.zst && pacman -U --noconfirm 

# Build profanity
# This build step fails. There are issues with gpgme, which prevent compilation. 
# In THEN trying to compile gpgme, I ran into issues with broken language requirements. 
# I stopped there. 
RUN wget https://aur.archlinux.org/cgit/aur.git/snapshot/profanity-git.tar.gz && \
  tar -zxvf profanity-git.tar.gz && \
	pushd profanity-git && makepkg && popd

# The below COPY should be used with extreme caution. Say for example, a user decides to
# run the build script while not *in* the build directory. This will effectively copy
# the user's home directory into the image environment (or whereever they happen to be)
# and thus will introduce data that's unnecessary. Even well written instructions will
# fail the moment a user decides to ignore the steps and do their own thing (which is
# almost always). 
# 
### COPY . /usr/src/profanity 
# Decoupling Profanity's code base from the image/container is a way to do this I suppose,
# but is unnecessary given the broader goal: Do you want the container to be self-contained,
# or require an externally compiled body of code to be ran in it ?? The latter is problematic, 
# because then it's assumed that whatever is *in* said code base is compatible with libraries
# and other components as found in the image's environment which is almost certainly not true
# most of the time. 

